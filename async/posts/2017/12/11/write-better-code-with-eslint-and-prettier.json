{"tags":[{"name":"javascript","permalink":"https://egoist.moe/tags/javascript/","url":"/async/tags/javascript.json","count":11},{"name":"eslint","permalink":"https://egoist.moe/tags/eslint/","url":"/async/tags/eslint.json","count":1},{"name":"prettier","permalink":"https://egoist.moe/tags/prettier/","url":"/async/tags/prettier.json","count":1}],"categories":[],"url":"/async/posts/2017/12/11/write-better-code-with-eslint-and-prettier.json","date":1512999425000,"path":{"year":2017,"month":12,"day":11,"name":"write-better-code-with-eslint-and-prettier"},"subtitle":"当然你的代码本身不能是无意义的","title":"用 ESLint 和 Prettier 写出高质量代码","permalink":"https://egoist.moe/2017/12/11/write-better-code-with-eslint-and-prettier/","content":"<p><a href=\"https://github.com/eslint/eslint\" target=\"_blank\" rel=\"external\">ESLint</a> 可以检测出你代码中潜在的问题，比如使用了某个变量却忘记了定义，而 <a href=\"https://github.com/prettier/prettier\" target=\"_blank\" rel=\"external\">Prettier</a> 作为代码格式化工具，能够统一你或者你的团队的代码风格。</p>\n<p>本文不会介绍这两种工具单独的使用方法，因为相关网络资料已经足够多了。这里我介绍一下怎么同时使用它们。</p>\n<h2 id=\"zai-eslint-zhong-shi-yong-eslintpluginprettier\">在 ESLint 中使用 eslint-plugin-prettier</h2>\n<p><strong>为什么使用这种方法: 希望格式化结果完全符合 Prettier 的要求。</strong></p>\n<p><code>eslint-plugin-prettier</code> 的工作原理是，对比格式化前和用 Prettier 格式化后的代码，有不一致的地方就会报错，然后你可以手动运行 <code>eslint --fix</code> 来修复。</p>\n<p>不过 Prettier 的格式化很可能和你使用的 ESLint 配置冲突，比如你的 ESLint 设定的不使用分号，而 Prettier 默认使用分号，这时候你需要配置 Prettier 让它不使用分号。反之如果你想使用 Prettier 的规则而不是 ESLint 的，为防止 ESLint 报错，你需要使用 <code>eslint-config-prettier</code> 来关闭所有可能引起冲突的规则。</p>\n<p>总结一下我的配置如下 <code>package.json</code>:</p>\n<pre><code class=\"language-json\">{\n  &quot;scripts&quot;: {\n    &quot;lint&quot;: &quot;eslint *.js&quot;\n  },\n  &quot;eslintConfig&quot;: {\n    &quot;extends&quot;: [\n      &quot;prettier&quot;\n    ],\n    &quot;plugins&quot;: [\n      &quot;prettier&quot;\n    ],\n    &quot;rules&quot;: {\n      &quot;prettier/prettier&quot;: &quot;error&quot;\n    }\n  },\n  &quot;prettier&quot;: {\n    &quot;singleQuote&quot;: true,\n    &quot;semi&quot;: false\n  }\n}\n</code></pre>\n<p>你可以使用大多数编辑器里 ESLint 插件提供的 <code>autoFixOnSave</code> 选项来在保存时自动格式化。</p>\n<h2 id=\"shi-yong-prettiereslintcli\">使用 prettier-eslint-cli</h2>\n<p><strong>为什么使用它: 希望格式化结果完全符合 ESLint 的要求。</strong></p>\n<p>使用 ESLint 与 <code>eslint-plugin-prettier</code> 的结果是最终得到的代码是充分尊重 Prettier 的结果，而 <code>prettier-eslint-cli</code> 则是先执行 Prettier 然后再自动使用 <code>eslint --fix</code> 将与 ESLint 规则冲突的代码修正成 ESLint 想要的结果。这样其实引入 Prettier 不会影响你原有的设置。</p>\n<p>总结一下我的配置如下 <code>package.json</code>:</p>\n<pre><code class=\"language-json\">{\n  &quot;scripts&quot;: {\n    // ESLint 只负责检查代码质量\n    &quot;lint&quot;: &quot;eslint *.js&quot;,\n    // 用 Prettier 格式化代码并自动 `eslint --fix `以便下次执行 `npm run lint` 时不会报错\n    &quot;format&quot;: &quot;prettier-eslint --write *.js&quot;\n  },\n  &quot;eslintConfig&quot;: {\n    &quot;extends&quot;: &quot;some-config&quot;\n  },\n  &quot;prettier&quot;: {\n    &quot;singleQuote&quot;: true,\n    &quot;semi&quot;: false\n  }\n}\n</code></pre>\n<p>除了命令行的 <code>npm run format</code>，同时你也可以使用编辑器里的 Prettier 插件，并启用 <code>eslintIntegration</code> 来在编辑器里自动格式化代码。</p>\n"}