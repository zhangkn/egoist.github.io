{"tags":[{"name":"javascript","permalink":"https://egoist.moe/tags/javascript/","url":"/async/tags/javascript.json","count":11},{"name":"jest","permalink":"https://egoist.moe/tags/jest/","url":"/async/tags/jest.json","count":1},{"name":"test","permalink":"https://egoist.moe/tags/test/","url":"/async/tags/test.json","count":1}],"categories":[],"url":"/async/posts/2017/11/26/tesing-javascript-apps-using-jest.json","date":1511679904000,"path":{"year":2017,"month":11,"day":26,"name":"tesing-javascript-apps-using-jest"},"title":"用 Jest 测试 JavaScript 应用","permalink":"https://egoist.moe/2017/11/26/tesing-javascript-apps-using-jest/","content":"<p>Jest 是 FaceBook 用来测试 JavaScript 应用的一套测试框架，这些应用当然也包括了 React 应用。它的优点之一是自带了对 React 的支持，同时也很容易支持其它框架。</p>\n<p>从最简单的开始，我们可以看看如何用 Jest 测试纯 JS 项目。</p>\n<p>假设你需要测试 <code>sum.js</code>:</p>\n<pre><code class=\"language-js\">export default (a, b) =&gt; a + b\n</code></pre>\n<p>你只需要对应地新建一个 <code>sum.test.js</code><sup class=\"footnote-ref\"><a href=\"#fn1\" id=\"fnref1\">[1]</a></sup>:</p>\n<pre><code class=\"language-js\">import sum from './sum'\n\ntest('sum', () =&gt; {\n  expect(sum(2, 3)).toBe(5)\n})\n</code></pre>\n<details style=\"margin-bottom: 30px\"><summary>关于这里的 `expect` 语法</summary>\n<p>这里的 <code>expect</code> <code>toBe</code> 是 Jest 默认使用的断言语法，也就是用来比较 <code>值</code> 的 API，详见<a href=\"https://facebook.github.io/jest/docs/en/using-matchers.html#content\" target=\"_blank\" rel=\"external\">相关文档</a>。</p>\n</details>\n<p>然后在终端运行 <code>jest</code> 命令的时候就会自动找到这个文件，执行这里面的测试:</p>\n<p><img src=\"https://i.loli.net/2017/11/26/5a1a6a9148ca3.png\" alt=\"jest\"></p>\n<p>额，报错了，原来 Jest 默认只支持你所使用的 node.js 版本所支持的 JS 特性，例如 <code>import</code> <code>export</code> 就不支持，所以要么你的代码使用系统 node.js 兼容的语法写 (也就是使用 <code>require</code>)，要么在这里使用 Babel 转义一下。</p>\n<p>在 Jest 中使用 Babel 很简单，只需要安装 <code>babel-jest</code> 并新建一个 <code>.babelrc</code> 加入你想要的配置就行了，Jest 会自动使用 <code>babel-jest</code>。这里我们简单地使用 <code>babel-preset-env</code> 即可，对应的 <code>.babelrc</code> 是:</p>\n<pre><code class=\"language-json\">{\n  &quot;presets&quot;: [&quot;env&quot;]\n}\n</code></pre>\n<p>然后重新运行 jest 测试便通过了:</p>\n<p><img src=\"https://i.loli.net/2017/11/26/5a1a6c085ba32.png\" alt=\"jest 2\"></p>\n<p>对于 React 应用，基本和纯 JS 项目类似，不过你需要在 <code>.babelrc</code> 中配置对 <code>JSX</code> 的支持，在大多数时候你的项目本身就已经在使用 <code>.babelrc</code> 了，所以这一步甚至也省略掉了。</p>\n<h2 id=\"zi-yuan-wen-jian\">资源文件</h2>\n<p>当你要测试的代码引用了非 JS 文件时，Jest 就不知道如何使用这些文件了，例如你的 Webpack 项目中的一个文件:</p>\n<pre><code class=\"language-js\">import './style.css'\n</code></pre>\n<p>正如你需要在 Webpack 中配置了 <code>css-loader</code> 一样，你也需告诉 Jest 如何处理 CSS 文件。</p>\n<p>📝 <strong>package.json:</strong></p>\n<pre><code class=\"language-json\">{\n  &quot;jest&quot;: {\n    &quot;transform&quot;: {\n      &quot;^.+\\\\.(js|jsx)$&quot;: &quot;babel-jest&quot;,\n      &quot;^.+\\\\.css$&quot;: &quot;&lt;rootDir&gt;/jest/css-transform.js&quot;\n    }\n  }\n}\n</code></pre>\n<details style=\"margin-bottom: 30px\"><summary>关于 babel-jest</summary>\n<p>当你手动在 <code>package.json</code> 里设置了 <code>jest.transform</code> 时 <code>babel-jest</code> 不再会被自动使用了，我们需要在这里手动配置。</p>\n</details>\n<p>对应的 <code>./jest/css-transform.js</code></p>\n<pre><code class=\"language-js\">// 大多数测试并不关心 CSS 文件里的内容\n// 所以这里我们直接返回一个空的对象\nmodule.exports = {\n  process() {\n    return 'module.exports = {};'\n  },\n  getCacheKey() {\n    // The output is always the same.\n    return 'css-cache'\n  }\n}\n</code></pre>\n<p>类似地，你可以使用 <code>transform</code> 来设定如何处理其它类型的文件，比如 <code>.vue</code><sup class=\"footnote-ref\"><a href=\"#fn2\" id=\"fnref2\">[2]</a></sup> <code>.svg</code> 文件。</p>\n<h2 id=\"liu-lan-qi-api\">浏览器 API</h2>\n<p>假设你要测试的是一个 Web 应用，依赖于一些浏览器 API 比如 <code>window</code> <code>document</code>，它在 Jest 中同样可以正常运行，因为 Jest 默认使用了 <a href=\"https://github.com/tmpvar/jsdom\" target=\"_blank\" rel=\"external\">js-dom</a> 来模拟浏览器环境，不需要浏览器环境时可以通过使用命令行参数 <code>--env node</code> 或者<a href=\"http://facebook.github.io/jest/docs/en/configuration.html#testenvironment-string\" target=\"_blank\" rel=\"external\">配置文件</a>来禁用。</p>\n<h2 id=\"snapshot-ce-shi\">Snapshot 测试</h2>\n<p>当你期望某个值不会改变的时候，可以使用 snapshot 测试。简单地说，它就是记录这个值的状态到<a href=\"https://github.com/facebook/jest/blob/master/examples/snapshot/__tests__/__snapshots__/link.react.test.js.snap\" target=\"_blank\" rel=\"external\">本地自动生成的 snapshot 文件</a>里，然后在下一次测试中用新的值来和其进行对比。这对 UI 之类的测试很有帮助:</p>\n<pre><code class=\"language-js\">import React from 'react'\nimport Link from '../Link.react'\nimport renderer from 'react-test-renderer'\n\nit('renders correctly', () =&gt; {\n  const tree = renderer\n    .create(&lt;Link page=&quot;http://www.facebook.com&quot;&gt;Facebook&lt;/Link&gt;)\n    .toJSON()\n  expect(tree).toMatchSnapshot()\n})\n</code></pre>\n<p>这确保了 <code>&lt;Link page=&quot;http://www.facebook.com&quot;&gt;Facebook&lt;/Link&gt;</code> 渲染出的内容不会出错。</p>\n<p>当你更改了 <code>&lt;Link&gt;</code> 组件的逻辑，需要更新 snapshot 文件时，可以加上 <code>--updateSnapshot</code> 或者 <code>-u</code> 来更新。</p>\n<p>类似的，Snapshot 测试不止于 UI 测试中，假设你写了个 Markdown 解析器，你可以用它来确保解析出的内容不会改变:</p>\n<pre><code class=\"language-js\">import renderMarkdown from './my-markdown-parser'\n\ntest('render correctly', () =&gt; {\n  const html = renderMarkdown('# markdown code')\n  expect(html).toMatchSnapshot()\n})\n</code></pre>\n<p>查看<a href=\"https://facebook.github.io/jest/docs/en/snapshot-testing.html#content\" target=\"_blank\" rel=\"external\">相关文档</a>。</p>\n<h2 id=\"yi-bu-dai-ma-ce-shi\">异步代码测试</h2>\n<p><a href=\"https://facebook.github.io/jest/docs/en/asynchronous.html#content\" target=\"_blank\" rel=\"external\">https://facebook.github.io/jest/docs/en/asynchronous.html#content</a></p>\n<p>我就懒得写了… 反正用 <code>Promise</code> 或者 <code>async/await</code> 就对了。</p>\n<hr class=\"footnotes-sep\">\n<section class=\"footnotes\">\n<ol class=\"footnotes-list\">\n<li id=\"fn1\" class=\"footnote-item\"><p>Jest 默认使用 <code>[ '**/__tests__/**/*.js?(x)', '**/?(*.)(spec|test).js?(x)' ]</code> 这些测试文件，当然这是<a href=\"https://facebook.github.io/jest/docs/en/configuration.html#testmatch-array-string\" target=\"_blank\" rel=\"external\">可配置</a>的。 <a href=\"#fnref1\" class=\"footnote-backref\">↩︎</a></p>\n</li>\n<li id=\"fn2\" class=\"footnote-item\"><p><code>.vue</code> 的 <code>transform</code> 可以使用社区的 <a href=\"https://github.com/eddyerburgh/vue-jest\" target=\"_blank\" rel=\"external\">jest-vue</a>。 <a href=\"#fnref2\" class=\"footnote-backref\">↩︎</a></p>\n</li>\n</ol>\n</section>\n"}